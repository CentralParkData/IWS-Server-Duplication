**FREE
ctl-opt option (*srcstmt : *nodebugio : *nounref);
ctl-opt debug (*input);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//  Program : Ws_sbm_pgm
//  Author  : Mike Larsen
//  Date Written: 01/20/2018
//  Purpose : This program will provide a Ui to gather info about
//            the Web Service to be promoted.
//
//  Copyright (c) Central Park Data Systems, Inc. All rights reserved.
//
//  Licensed under the Source EULA. See License.txt in the project root 
//  for license information.
//
//====================================================================*
//   Date    Programmer  Description                                  *
//--------------------------------------------------------------------*
// 01/20/18  M.Larsen    Original code.                               *
//                                                                    *
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

dcl-f Ws_props Disk Usage(*input) usropn;
dcl-f Ws_sbm_ui Workstn Infds(Dspfds);

//- - - -
// Program status data structure

dcl-ds pgm_stat PSDS qualified;
       Program     char(10) pos(1);
       WorkStation char(10) pos(244);
       User        char(10) pos(254);
end-ds;

dcl-ds Dspfds;
       Record  *Record;
       Cmd_Key char(1) pos(369);
end-ds;

dcl-c Cmd_Enter Const (x'F1');
dcl-c Cmd03     Const (x'35');
dcl-c Cmd06     Const (x'36');

// - - - -
// Workfields

dcl-s CmdStr         Char(1000);
dcl-s ErrorFlag      Char(1)  Inz('N');
dcl-s FileLibrary    Char(10);
dcl-s SrcServerCount Zoned(5:0);
dcl-s DstServerCount Zoned(5:0);
dcl-s ServiceCount   Zoned(5:0);
dcl-s LogFileCount   Zoned(5:0);
dcl-s SvrFileCount   Zoned(5:0);
dcl-s SvcFileCount   Zoned(5:0);
dcl-s PgmObjCount    Zoned(5:0);
dcl-s SrcServerValid Char(1);
dcl-s DstServerValid Char(1);
dcl-s SrcIbmIValid   Char(1);
dcl-s DstIbmiValid   Char(1);
dcl-s LogFileValid   Char(10);
dcl-s SvrFileValid   Char(10);
dcl-s SvcFileValid   Char(10);
dcl-s PgmObjValid    Char(1);
dcl-s SrcSvcExists   Char(1);
dcl-s DstSvcExists   Char(1);
dcl-s SrcIbmiStmt    Char(100);
dcl-s DstIbmiStmt    Char(100);
dcl-s SystemName     Char(10);
dcl-s LibraryList    Char(150);
dcl-s TextPosition   Zoned(3:0);
dcl-s Exit           Char(1);

dcl-pr Ws_GetProp ExtPgm('WS_GETPROP');
       PServer      Char(20);
       PService     Char(20);
       PFile        Char(10);
       PFileLibrary Char(10);
End-pr;

dcl-pr Ws_Servers ExtPgm('WS_SERVERS');
       PFile        Char(10);
       PFileLibrary Char(10);
End-pr;

dcl-pr Ws_Service ExtPgm('WS_SERVICE');
       Server       Char(20);
       PFile        Char(10);
       PFileLibrary Char(10);
End-pr;

// - - - -
//Run CL Command

dcl-pr Run ExtPgm('QCMDEXC');
       CmdStr  Char(3000) Options(*VarSize);
       CmdLen  Packed(15:5) Const;
       CmdDbcs Char(2) Const Options(*Nopass);
End-pr;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  Dow *In03 = *Off;

      Exfmt Screen1;

      Select;

      When *In03 = *On;
           Leave;

      When *In06 = *On;
           Exsr PerformValidation;

           Exsr CheckErrors;
           Exsr PutOutMessage;

      When Cmd_Key = Cmd_enter;
           Exsr PerformValidation;

           Exsr CheckErrors;

           If ErrorFlag = 'N';
              Exsr Submit;

              Message = 'Process submitted!';
              LibListMsg = *Blanks;
           Endif;

      Endsl;

      Write Screen1;

      If Exit = 'Y';
         *In03 = *On;
      Endif;

  Enddo;

  *Inlr = *On;
  Return;

 //--------------------------------------------------------
 // PerformValidation subroutine
 //--------------------------------------------------------

 Begsr PerformValidation;

   Exsr BuildPropertiesTable;
   Exsr ValidateServer;
   Exsr ValidateService;
   Exsr ValidatePropFileLib;
   Exsr ValidatePgmObjLib;
   Exsr ValidateSvrFileLib;
   Exsr ValidateSvcFileLib;
   Exsr ValidateIbmi;

 Endsr;

 //--------------------------------------------------------
 // PutOutMessage subroutine
 //--------------------------------------------------------

 Begsr PutOutMessage;

   If ErrorFlag = 'N';
      Message    = *Blanks;
      LibListMsg = *Blanks;

      Message    = 'Validation successful.';
      LibListMsg = 'Modify library list if necessary and press +
                   enter';

      // show the library list field with library list from
      // prior server deployment.  they can change it for the
      // next server deployment.

      *In40 = *On;
      *In41 = *On;

      // this will get the library list from the source
      // service.  allow them to change it if necessary.

      Exsr GetProperties;

   Else;
      Message = 'Please correct errors.';

   Endif;

 Endsr;

 //--------------------------------------------------------
 // BuildPropertiesTable subroutine
 //--------------------------------------------------------

 Begsr BuildPropertiesTable;

   // build the properties file from the source server/service

   Callp Ws_GetProp(ServerSrc:ServiceNme:LogFile:LogFileLib);

 Endsr;

 //--------------------------------------------------------
 // GetProperties subroutine
 //--------------------------------------------------------

 Begsr GetProperties;

   Open Ws_props;

   // Read through the Web Services properties file.

   Read Ws_props;

   Dow Not %Eof(Ws_props);

       // get Library list.  the library list is given to us with a
       // semi-colon separator when we use it from the properties file,
       // but we need to send it with a colon separator when we install
       // a Web Service.  We need to change it. If they send us a
       // library list as a parm, use that instead of what u get from
       // the properties file.

       TextPosition = %Scan('Library list:':Text);

       If TextPosition > 0;
          LibraryList = %Trim(%Subst(Text:14));
       Endif;

       If LibraryList <> *Blanks;
          LibraryList = %ScanRpl(';' : ':' : LibraryList);
       Endif;

       // only populate the library list from the prior server
       // if it's blank.  We don't want to replace it if they
       // changed it.

       If Lib_List = *Blanks;
          Lib_list = LibraryList;
       Endif;

   Read Ws_props;

   Enddo;

   Close Ws_props;

 Endsr;

 //--------------------------------------------------------
 // ValidateServer subroutine
 //--------------------------------------------------------

 Begsr ValidateServer;

   // build the file of servers

   Callp Ws_Servers(ServerFile:SvrFileLib);

   // check if the source server is valid

   Exec Sql
     Select Count(*) into :SrcServerCount
      From Ws_srvr
      Where Server Like '%' Concat Trim(:ServerSrc) concat '%';

   If SrcServerCount > 0;
      SrcServerValid = 'Y';
   Else;
      SrcServerValid = 'N';
   Endif;

   // check if the destination server is valid

   Exec Sql
     Select Count(*) into :DstServerCount
      From Ws_srvr
      Where Server Like '%' Concat Trim(:ServerDest) concat '%';

   If DstServerCount > 0;
      DstServerValid = 'Y';
   Else;
      DstServerValid = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidateService subroutine
 //--------------------------------------------------------

 Begsr ValidateService;

   // build the file of services on the source server

   Callp Ws_Service(ServerSrc:SvcFile:SvcFileLib);

   // check if the service exists on the source server

   Exec Sql
     Select Count(*) into :ServiceCount
      From Ws_srvce
      Where Service Like '%' Concat Trim(:ServiceNme) concat '%';

   If ServiceCount > 0;
      SrcSvcExists = 'Y';
   Else;
      SrcSvcExists = 'N';
   Endif;

   ServiceCount = *Zeros;

   // build the file of services on the destination server

   Callp Ws_Service(ServerDest:SvcFile:SvcFileLib);

   // check if the service exists on the destination server

   Exec Sql
     Select Count(*) into :ServiceCount
      From Ws_srvce
      Where Service Like '%' Concat Trim(:ServiceNme) concat '%';

   If ServiceCount > 0;
      DstSvcExists = 'Y';
   Else;
      DstSvcExists = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidatePropFileLib subroutine
 //--------------------------------------------------------

 Begsr ValidatePropFileLib;

   // check if the log file object exists

   Exec Sql
     Select Count(*) into :LogFileCount
      From Qsys2.Tables
      Where Table_Schema = :LogFileLib and Table_name = :LogFile;

   If LogFileCount > 0;
      LogFileValid = 'Y';
   Else;
      LogFileValid = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidatePgmObjLib subroutine
 //--------------------------------------------------------

 Begsr ValidatePgmObjLib;

   // check if the web service rpg program object exists

   Exec Sql
     Select Count(*) into :PgmObjCount
      From Table(Qsys2.Object_Statistics(Trim(:ServiceLib),'ALL')) a
      Where objname = Trim(:ServicePgm);

   If PgmObjCount > 0;
      PgmObjValid = 'Y';
   Else;
      PgmObjValid = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidateSvrFileLib subroutine
 //--------------------------------------------------------

 Begsr ValidateSvrFileLib;

   // check if the server file object exists

   Exec Sql
     Select Count(*) into :SvrFileCount
      From Qsys2.Tables
      Where Table_Schema = :SvrFileLib and Table_name = :ServerFile;

   If SvrFileCount > 0;
      SvrFileValid = 'Y';
   Else;
      SvrFileValid = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidateSvcFileLib subroutine
 //--------------------------------------------------------

 Begsr ValidateSvcFileLib;

   // check if the service file object exists

   Exec Sql
     Select Count(*) into :SvcFileCount
      From Qsys2.Tables
      Where Table_Schema = :SvcFileLib and Table_name = :SvcFile;

   If SvcFileCount > 0;
      SvcFileValid = 'Y';
   Else;
      SvcFileValid = 'N';
   Endif;

 Endsr;

 //--------------------------------------------------------
 // ValidateIbmi subroutine
 //--------------------------------------------------------

 Begsr ValidateIbmi;

   //- - - - -
   // Check the source Ibm i
   //- - - - -
   // check if the source and destination Ibm i are valid
   // we'll first check to see if the source and destination
   // are the current system they're on since the sql
   // statements will be slightly different if we need to
   // check a remote Ibm i.

   Exec Sql
     Values Current Server
       into :SystemName;

   If %Trim(SystemName) = %Trim(IbmiSrc);

      // The Ibm i source is the local system they're on

      SrcIbmIValid = 'Y';

   Else;

      // The Ibm i source is NOT the local system they're on

      SrcIbmiStmt  = 'Select *' +
                     ' from ' +  %Trim(IbmiSrc) +
                     '.SysIbm.SysDummy1 ';

      Exec Sql Execute Immediate :SrcIbmiStmt;

      If SqlCod <> 0;
         SrcIbmIValid = 'N';
      Else;
         SrcIbmIValid = 'Y';
      Endif;

   Endif;

   //- - - - -
   // Check the destination Ibm i
   //- - - - -

   Exec Sql
     Values Current Server
      into :SystemName;

   If %Trim(SystemName) =  %Trim(IbmiDest);

      // The Ibm i destination is the local system they're on

      DstIbmIValid = 'Y';

   Else;

      // The Ibm i destination is NOT the local system  they're on

      DstIbmiStmt  = 'Select *' +
                     ' from ' +  %Trim(IbmiDest) +
                     '.SysIbm.SysDummy1 ';

      Exec Sql Execute Immediate :DstIbmiStmt;

      If SqlCod <> 0;
         DstIbmIValid = 'N';
      Else;
         DstIbmIValid = 'Y';
      Endif;

   Endif;

 Endsr;

 //--------------------------------------------------------
 // CheckErrors subroutine
 //--------------------------------------------------------

 Begsr CheckErrors;

   *In30 = *Off;
   *In31 = *Off;
   *In32 = *Off;
   *In33 = *Off;
   *In34 = *Off;
   *In35 = *Off;
   *In36 = *Off;
   *In37 = *Off;
   *In38 = *Off;
   *In42 = *Off;
   *In43 = *Off;
   *In44 = *Off;
   *In45 = *Off;

   Select;
      When SrcServerValid = 'N';
           ErrorFlag = 'Y';
           *In32     = *On;

      When DstServerValid = 'N';
           ErrorFlag = 'Y';
           *In33     = *On;

      When SrcIbmIValid = 'N';
           ErrorFlag = 'Y';
           *In30     = *On;

      When DstIbmIValid = 'N';
           ErrorFlag = 'Y';
           *In31     = *On;

      When LogFileValid = 'N';
           ErrorFlag = 'Y';
           *In37     = *On;
           *In38     = *On;

      When PgmObjValid  = 'N';
           ErrorFlag = 'Y';
           *In35     = *On;
           *In36     = *On;

      When SrcSvcExists = 'N';
           ErrorFlag = 'Y';
           *In34     = *On;

      When SvrFileValid = 'N';
           ErrorFlag = 'Y';
           *In42     = *On;
           *In43     = *On;

      When SvcFileValid = 'N';
           ErrorFlag = 'Y';
           *In44     = *On;
           *In45     = *On;

      // if the service already exists on the destination
      // server, throw a message.

      When DstSvcExists = 'Y';
           ErrorFlag = 'Y';
           *In34     = *On;
           SvcExists = 'Service already exists on destination.';

      Other;
           ErrorFlag = 'N';
      Endsl;

 Endsr;

 //--------------------------------------------------------
 // Submit subroutine
 //--------------------------------------------------------

 Begsr Submit;

   CmdStr = *Blanks;

   CmdStr = 'SBMJOB CMD(CALL PGM(WS_SUBMIT) PARM(''' +
            ServerSrc + '''' + ' ' + '''' +
            ServerDest + '''' + ' ' + '''' +
            ServiceNme + '''' + ' ' + '''' +
            LogFile + '''' + ' ' + '''' +
            LogFileLib + '''' + ' ' + '''' +
            ServiceLib + '''' + ' ' + '''' +
         //   SvcFileLib + '''' + ' ' + '''' +
            Lib_List + '''' + ')) '
            + 'JOB(WS_SUBMIT) ' +
            'JOBD(MIKEJOBD) ';

   Callp Run(Cmdstr:%Size(CmdStr));

 Endsr;

 //--------------------------------------------------------
 // *Inzsr subroutine
 //--------------------------------------------------------

 Begsr *Inzsr;

   IbmiSrc    = *Blanks;
   IbmiDest   = *Blanks;
   ServerSrc  = *Blanks;
   ServerDest = *Blanks;
   ServiceNme = *Blanks;
   ServicePgm = *Blanks;
   ServiceLib = *Blanks;
   LogFile    = *Blanks;
   LogFileLib = *Blanks;
   ServerFile = *Blanks;
   SvrFileLib = *Blanks;
   SvcFile    = *Blanks;
   SvcFileLib = *Blanks;

   IbmiSrc    = 'xxxxx';
   IbmiDest   = 'xxxxx';
   ServerSrc  = 'mike_dev';
   ServerDest = 'mike_test';
   ServiceNme = 'TEST_WS_REST';
  // ServiceNme = 'TEST_WS_SOAP';
  // ServiceNme = 'TEST_WS';
   ServicePgm = 'TEST_WS';
   ServiceLib = 'MIKE_TEST';
   LogFile    = 'WS_PROPS';
   LogFileLib = 'MIKEL';
   ServerFile = 'WS_SRVR';
   SvrFileLib = 'MIKEL';
   SvcFile    = 'WS_SRVCE';
   SvcFileLib = 'MIKEL';

   DsUser = pgm_stat.User;
   DsWkst = pgm_stat.WorkStation;

 Endsr;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 